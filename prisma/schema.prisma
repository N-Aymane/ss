// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String?
  category    String
  colors      String   // JSON string array
  sizes       String   // JSON string array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  dropProducts DropProduct[]
  cartItems    CartItem[]
  orderItems   OrderItem[]

  @@map("products")
}

model Drop {
  id          String   @id @default(cuid())
  title       String
  description String
  dropDate    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  dropProducts DropProduct[]

  @@map("drops")
}

model DropProduct {
  id        String @id @default(cuid())
  dropId    String
  productId String

  drop    Drop    @relation(fields: [dropId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([dropId, productId])
  @@map("drop_products")
}

model SiteSettings {
  id               String  @id @default(cuid())
  closedMode       Boolean @default(false)
  closedModeDropId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("site_settings")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart   Cart?
  orders Order[]

  @@map("users")
}

model Cart {
  id     String @id @default(cuid())
  userId String @unique

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int    @default(1)
  size      String?
  color     String?

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, size, color])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  status        OrderStatus @default(PENDING)
  total         Float
  shippingName  String
  shippingEmail String
  shippingAddress String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  size      String?
  color     String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
